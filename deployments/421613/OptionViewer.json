{
  "address": "0x4e9bE6ca8899e9485F087f32e606BB9e2faC006E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlyingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoteToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$0_5_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$1_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$2_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$4_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$8_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "option$16_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "$0_5",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$4",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$8",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$16",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptionViewer.LockedCollateral",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "$0_5",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$4",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$8",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$16",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptionViewer.OptionTokenBalance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "$0_5",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$4",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$8",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$16",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptionViewer.UnderlyingTokenAllowance",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "$0_5",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$4",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$8",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "$16",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptionViewer.QuoteTokenAllowance",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "underlyingTokenBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quoteTokenBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3d9b55db6fc6700ef2ce4d6202ad601dd73d7ec8c6b9bb8e580f6c69c0cf465",
  "receipt": {
    "to": null,
    "from": "0x5F79EE8f8fA862E98201120d83c4eC39D9468D49",
    "contractAddress": "0x4e9bE6ca8899e9485F087f32e606BB9e2faC006E",
    "transactionIndex": 1,
    "gasUsed": "3976090",
    "logsBloom": "0x
    "blockHash": "0x76ca56b4ce25b977b9c373367a98324020c88afbe9ba32363533829a83ce913a",
    "transactionHash": "0xa3d9b55db6fc6700ef2ce4d6202ad601dd73d7ec8c6b9bb8e580f6c69c0cf465",
    "logs": [],
    "blockNumber": 12023356,
    "cumulativeGasUsed": "3976090",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd2a46071A279245b25859609C3de9305e6D5b3F2",
    "0xf3F8E2d3ab08BD619A794A85626970731c4174aA",
    "0x5D45a5ADa82ecf78021E9b4518036a3B649e5a35",
    "0x0820Ed58A1f0d6FF42712a1877E368f183C94219",
    "0xefa4841C3FA0bCC33987DA112f7EA3b1aC7541D9",
    "0x8705373587dA69FB99181938E1463982f0Fa5b56",
    "0xb28f8E47818dd44FA3d94928BE42809494FD506B",
    "0x5c4871CA3EB28C1c552E5DaCF31B20BE939E156d"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ceacc82c1ed3401597f1382cadcbd1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlyingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$0_5_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$4_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$8_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"option$16_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"$0_5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$16\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionViewer.LockedCollateral\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"$0_5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$16\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionViewer.OptionTokenBalance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"$0_5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$16\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionViewer.UnderlyingTokenAllowance\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"$0_5\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$8\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"$16\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionViewer.QuoteTokenAllowance\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"underlyingTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helper/OptionViewer.sol\":\"OptionViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PutOptionToken.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./interfaces/OptionToken.sol\\\";\\n\\ncontract PutOptionToken is ERC20, OptionToken, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant _PRECISION = 10**18;\\n\\n    uint8 private immutable _decimals;\\n    IERC20 private immutable _quoteToken;\\n    IERC20 private immutable _underlyingToken;\\n\\n    mapping(address => uint256) public collateral;\\n    uint256 public exercisedAmount;\\n\\n    uint256 public immutable strikePrice;\\n\\n    // Write => timestamp <= expiresAt\\n    // Cancel => timestamp <= expiresAt\\n    // Exercise => timestamp <= expiresAt\\n    // Redeem => expiresAt > timestamp\\n    uint256 public immutable expiresAt;\\n\\n    uint256 private constant _FEE_PRECISION = 10**6;\\n    uint256 public immutable exerciseFee; // bp\\n    uint256 public exerciseFeeBalance; // quote\\n\\n    constructor(\\n        address underlyingToken_,\\n        address quoteToken_,\\n        uint256 strikePrice_,\\n        uint256 expiresAt_,\\n        uint256 exerciseFee_,\\n        string memory name_,\\n        string memory symbol_\\n    ) ERC20(name_, symbol_) {\\n        _underlyingToken = IERC20(underlyingToken_);\\n        _quoteToken = IERC20(quoteToken_);\\n\\n        _decimals = IERC20Metadata(underlyingToken_).decimals();\\n\\n        strikePrice = strikePrice_;\\n        expiresAt = expiresAt_;\\n        exerciseFee = exerciseFee_;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function underlyingToken() external view returns (address) {\\n        return address(_underlyingToken);\\n    }\\n\\n    function quoteToken() external view returns (address) {\\n        return address(_quoteToken);\\n    }\\n\\n    function write(uint256 amount) external nonReentrant {\\n        require(block.timestamp <= expiresAt, \\\"OPTION_EXPIRED\\\");\\n\\n        uint256 collateralAmount = (amount * strikePrice) / _PRECISION;\\n        amount = (collateralAmount * _PRECISION) / strikePrice;\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        _quoteToken.safeTransferFrom(msg.sender, address(this), collateralAmount);\\n        collateral[msg.sender] += collateralAmount;\\n\\n        _mint(msg.sender, amount);\\n\\n        emit Write(msg.sender, amount);\\n    }\\n\\n    function cancel(uint256 amount) external nonReentrant {\\n        require(block.timestamp <= expiresAt, \\\"OPTION_EXPIRED\\\");\\n\\n        uint256 collateralAmount = (amount * strikePrice) / _PRECISION;\\n        amount = (collateralAmount * _PRECISION) / strikePrice;\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        collateral[msg.sender] -= collateralAmount;\\n        _burn(msg.sender, amount);\\n\\n        _quoteToken.transfer(msg.sender, collateralAmount);\\n\\n        emit Cancel(msg.sender, amount);\\n    }\\n\\n    function exercise(uint256 amount) external nonReentrant {\\n        require(block.timestamp <= expiresAt, \\\"OPTION_EXPIRED\\\");\\n\\n        uint256 collateralAmount = (amount * strikePrice) / _PRECISION;\\n        amount = (collateralAmount * _PRECISION) / strikePrice;\\n        require(amount > 0, \\\"INVALID_AMOUNT\\\");\\n\\n        _underlyingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        _burn(msg.sender, amount);\\n\\n        uint256 feeAmount = (collateralAmount * exerciseFee) / _FEE_PRECISION;\\n        exerciseFeeBalance += feeAmount;\\n\\n        _quoteToken.transfer(msg.sender, collateralAmount - feeAmount);\\n\\n        exercisedAmount += amount;\\n\\n        emit Exercise(msg.sender, amount);\\n    }\\n\\n    function claim() external nonReentrant {\\n        require(block.timestamp > expiresAt, \\\"OPTION_NOT_EXPIRED\\\");\\n        uint256 expiredAmount = totalSupply();\\n        uint256 totalWrittenAmount = expiredAmount + exercisedAmount;\\n\\n        uint256 collateralAmount = collateral[msg.sender];\\n        uint256 amount = (collateralAmount * _PRECISION) / strikePrice;\\n\\n        uint256 redeemableQuoteAmount = (collateralAmount * expiredAmount) / totalWrittenAmount;\\n        uint256 redeemableUnderlyingAmount = (amount * exercisedAmount) / totalWrittenAmount;\\n\\n        collateral[msg.sender] = 0;\\n        _quoteToken.transfer(msg.sender, redeemableQuoteAmount);\\n        _underlyingToken.transfer(msg.sender, redeemableUnderlyingAmount);\\n\\n        emit Claim(msg.sender, amount);\\n    }\\n\\n    function collectFee() external onlyOwner nonReentrant {\\n        _underlyingToken.transfer(msg.sender, exerciseFeeBalance);\\n        exerciseFeeBalance = 0;\\n\\n        emit CollectFee(msg.sender, exerciseFeeBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x94bb5a2f260a86644edf3d0fb4a50f2bba9426b25fdcbf52bfba86894e34b332\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$0.5PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$0_5PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            5 * 10**17,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $0.5 Put Options\\\",\\n            \\\"ARB$0.5PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0x2d90a67c9be8a9deaefb084b7b31fddf3a6519cf51188824c4798fb2f3eae053\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$16PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$16PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            16 * 10**18,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $16 Put Options\\\",\\n            \\\"ARB$16PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0xcc9390bcf5dafa3daeb89923f9b7daea8502ec4ce40fc9c40a5be20cd6794bde\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$1PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$1PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            10**18,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $1 Put Options\\\",\\n            \\\"ARB$1PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0x1eb2caba223ac68b3146055700fadd97414d75d9934c4cd68763e17521778b1c\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$2PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$2PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            2 * 10**18,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $2 Put Options\\\",\\n            \\\"ARB$2PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0xbc19ed76d2bf0e2361d714baede86b503bf9280d5cf0d1060d53477d365d4a66\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$4PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$4PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            4 * 10**18,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $4 Put Options\\\",\\n            \\\"ARB$4PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0xfabe63a949142cc090fa63e8c10149199ed4fc6634334ef93d02f2e54ba27412\",\"license\":\"-\"},\"contracts/arbitrum/Arbitrum$8PutOption.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../PutOptionToken.sol\\\";\\n\\ncontract Arbitrum$8PutOption is PutOptionToken {\\n    constructor(address underlyingToken, address quoteToken)\\n        PutOptionToken(\\n            underlyingToken,\\n            quoteToken,\\n            8 * 10**18,\\n            1679575187 + 24 * 60 * 60,\\n            1000, // 0.1%\\n            \\\"Arbitrum $8 Put Options\\\",\\n            \\\"ARB$8PUT\\\"\\n        )\\n    {}\\n}\\n\",\"keccak256\":\"0x3205d9c30fb4de78f61857e68108bfc7c97ecd13325c3cf21de03ed939d57e96\",\"license\":\"-\"},\"contracts/helper/OptionViewer.sol\":{\"content\":\"// SPDX-License-Identifier: -\\n// License: https://license.clober.io/LICENSE.pdf\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../arbitrum/Arbitrum$0.5PutOption.sol\\\";\\nimport \\\"../arbitrum/Arbitrum$1PutOption.sol\\\";\\nimport \\\"../arbitrum/Arbitrum$2PutOption.sol\\\";\\nimport \\\"../arbitrum/Arbitrum$4PutOption.sol\\\";\\nimport \\\"../arbitrum/Arbitrum$8PutOption.sol\\\";\\nimport \\\"../arbitrum/Arbitrum$16PutOption.sol\\\";\\n\\ncontract OptionViewer {\\n    struct LockedCollateral {\\n        uint256 $0_5;\\n        uint256 $1;\\n        uint256 $2;\\n        uint256 $4;\\n        uint256 $8;\\n        uint256 $16;\\n    }\\n\\n    struct OptionTokenBalance {\\n        uint256 $0_5;\\n        uint256 $1;\\n        uint256 $2;\\n        uint256 $4;\\n        uint256 $8;\\n        uint256 $16;\\n    }\\n\\n    struct UnderlyingTokenAllowance {\\n        uint256 $0_5;\\n        uint256 $1;\\n        uint256 $2;\\n        uint256 $4;\\n        uint256 $8;\\n        uint256 $16;\\n    }\\n\\n    struct QuoteTokenAllowance {\\n        uint256 $0_5;\\n        uint256 $1;\\n        uint256 $2;\\n        uint256 $4;\\n        uint256 $8;\\n        uint256 $16;\\n    }\\n\\n    address immutable underlyingToken;\\n    address immutable quoteToken;\\n\\n    address immutable option$0_5;\\n    address immutable option$1;\\n    address immutable option$2;\\n    address immutable option$4;\\n    address immutable option$8;\\n    address immutable option$16;\\n\\n    constructor(\\n        address underlyingToken_,\\n        address quoteToken_,\\n        address option$0_5_,\\n        address option$1_,\\n        address option$2_,\\n        address option$4_,\\n        address option$8_,\\n        address option$16_\\n    ) {\\n        underlyingToken = underlyingToken_;\\n        quoteToken = quoteToken_;\\n\\n        option$0_5 = option$0_5_;\\n        option$1 = option$1_;\\n        option$2 = option$2_;\\n        option$4 = option$4_;\\n        option$8 = option$8_;\\n        option$16 = option$16_;\\n    }\\n\\n    function getUserBalance(address user)\\n        external\\n        view\\n        returns (\\n            LockedCollateral memory,\\n            OptionTokenBalance memory,\\n            UnderlyingTokenAllowance memory,\\n            QuoteTokenAllowance memory,\\n            uint256 underlyingTokenBalance,\\n            uint256 quoteTokenBalance\\n        )\\n    {\\n        return (\\n            LockedCollateral(\\n                Arbitrum$0_5PutOption(option$0_5).collateral(user),\\n                Arbitrum$1PutOption(option$1).collateral(user),\\n                Arbitrum$2PutOption(option$2).collateral(user),\\n                Arbitrum$4PutOption(option$4).collateral(user),\\n                Arbitrum$8PutOption(option$8).collateral(user),\\n                Arbitrum$16PutOption(option$16).collateral(user)\\n            ),\\n            OptionTokenBalance(\\n                Arbitrum$0_5PutOption(option$0_5).balanceOf(user),\\n                Arbitrum$1PutOption(option$1).balanceOf(user),\\n                Arbitrum$2PutOption(option$2).balanceOf(user),\\n                Arbitrum$4PutOption(option$4).balanceOf(user),\\n                Arbitrum$8PutOption(option$8).balanceOf(user),\\n                Arbitrum$16PutOption(option$16).balanceOf(user)\\n            ),\\n            UnderlyingTokenAllowance(\\n                IERC20(underlyingToken).allowance(user, option$0_5),\\n                IERC20(underlyingToken).allowance(user, option$1),\\n                IERC20(underlyingToken).allowance(user, option$2),\\n                IERC20(underlyingToken).allowance(user, option$4),\\n                IERC20(underlyingToken).allowance(user, option$8),\\n                IERC20(underlyingToken).allowance(user, option$16)\\n            ),\\n            QuoteTokenAllowance(\\n                IERC20(quoteToken).allowance(user, option$0_5),\\n                IERC20(quoteToken).allowance(user, option$1),\\n                IERC20(quoteToken).allowance(user, option$2),\\n                IERC20(quoteToken).allowance(user, option$4),\\n                IERC20(quoteToken).allowance(user, option$8),\\n                IERC20(quoteToken).allowance(user, option$16)\\n            ),\\n            IERC20(underlyingToken).balanceOf(user),\\n            IERC20(quoteToken).balanceOf(user)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x52c0521de97976b1e24360ed3c6eeb8d54a5f2ad09dfd66a44845eb9cff63ca0\",\"license\":\"-\"},\"contracts/interfaces/OptionToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\ninterface OptionToken {\\n    event Write(address indexed writer, uint256 amount);\\n\\n    event Cancel(address indexed writer, uint256 amount);\\n\\n    event Exercise(address indexed recipient, uint256 amount);\\n\\n    event Claim(address indexed recipient, uint256 amount);\\n\\n    event CollectFee(address indexed recipient, uint256 amount);\\n\\n    function underlyingToken() external view returns (address);\\n\\n    function quoteToken() external view returns (address);\\n\\n    function collateral(address) external view returns (uint256);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function exercisedAmount() external view returns (uint256);\\n\\n    function expiresAt() external view returns (uint256);\\n\\n    function exerciseFee() external view returns (uint256);\\n\\n    function exerciseFeeBalance() external view returns (uint256);\\n\\n    function write(uint256 amount) external;\\n\\n    function cancel(uint256 amount) external;\\n\\n    function exercise(uint256 amount) external;\\n\\n    function claim() external;\\n}\\n\",\"keccak256\":\"0x22d280d3d950e4511f255d37af313987a23ac43c64a501ec628c007805d04f9f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}